import os
import json
from flask import Flask, render_template, request, jsonify, redirect, url_for, flash
from flask_socketio import SocketIO, emit
from openai import OpenAI
from dotenv import load_dotenv
from functools import wraps
import asyncio
import time
import uuid
import re
from urllib.parse import urlparse

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
api_key = os.getenv("OPENAI_API_KEY")
if not api_key:
    raise ValueError("OPENAI_API_KEY –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–∞ OpenAI
client = OpenAI(api_key=api_key)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask –∏ Socket.IO
app = Flask(__name__)
app.secret_key = os.getenv("FLASK_SECRET_KEY", os.urandom(24))
socketio = SocketIO(app, cors_allowed_origins="*")

# –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
active_tasks = {}

# –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–ø–æ–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
ELEMENT_TYPES = {
    "contact": "–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
    "product": "–ö–∞—Ä—Ç–æ—á–∫–∞ —Ç–æ–≤–∞—Ä–∞",
    "catalog": "–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤",
    "breadcrumbs": "–•–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏",
    "searchform": "–§–æ—Ä–º–∞ –ø–æ–∏—Å–∫–∞",
    "logo": "–õ–æ–≥–æ—Ç–∏–ø",
    "faq": "–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã",
    "article": "–°—Ç–∞—Ç—å—è",
    "qapage": "QA —Å—Ç—Ä–∞–Ω–∏—Ü–∞",
    "organization": "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è"
}

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ URL
def validate_url(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if request.method == 'POST':
            url = request.json.get('url', '')
            if not url.startswith(('http://', 'https://')):
                return jsonify({"error": "URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://"}), 400
        return f(*args, **kwargs)
    return decorated_function

async def generate_microdata_template(element_type: str, url: str, session_id: str = None) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —à–∞–±–ª–æ–Ω –º–∏–∫—Ä–æ—Ä–∞–∑–º–µ—Ç–∫–∏ —Å –ø–æ–º–æ—â—å—é OpenAI API –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏ URL,
    –∏—Å–ø–æ–ª—å–∑—É—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–µ–±-–ø–æ–∏—Å–∫–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–∞–π—Ç–∞
    """
    if element_type not in ELEMENT_TYPES:
        return f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —ç–ª–µ–º–µ–Ω—Ç–∞: {element_type}"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞—á–∞–ª–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    if session_id:
        socketio.emit('generation_status', {
            'session_id': session_id,
            'element_type': element_type,
            'status': 'started',
            'message': f'–ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–∏–∫—Ä–æ—Ä–∞–∑–º–µ—Ç–∫–∏ –¥–ª—è {ELEMENT_TYPES[element_type]}...'
        })
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ–º–µ–Ω–Ω–æ–µ –∏–º—è –∏–∑ URL –¥–ª—è –±–æ–ª–µ–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    domain = urlparse(url).netloc
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –º–∏–∫—Ä–æ—Ä–∞–∑–º–µ—Ç–∫–∏
    schema_prompts = {
        "contact": f"–ü–æ—Å–µ—Ç–∏ —Å–∞–π—Ç {url} –∏ —Å–æ–∑–¥–∞–π –º–∏–∫—Ä–æ—Ä–∞–∑–º–µ—Ç–∫—É Schema.org JSON-LD –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π —Ç–∏–ø LocalBusiness, –≤–∫–ª—é—á–∏ –Ω–∞—Å—Ç–æ—è—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏, –∞–¥—Ä–µ—Å, —Ç–µ–ª–µ—Ñ–æ–Ω, email –∏ —á–∞—Å—ã —Ä–∞–±–æ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –Ω–∞–π–¥–µ—à—å –Ω–∞ —Å–∞–π—Ç–µ. –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ –Ω–∞–π–¥–µ—à—å, –æ—Å—Ç–∞–≤—å –ø–æ–ª—è –ø—É—Å—Ç—ã–º–∏ –∏–ª–∏ —Å –∑–∞–≥–ª—É—à–∫–∞–º–∏.",
        
        "product": f"–ü–æ—Å–µ—Ç–∏ —Å–∞–π—Ç {url} –∏ —Å–æ–∑–¥–∞–π –º–∏–∫—Ä–æ—Ä–∞–∑–º–µ—Ç–∫—É Schema.org JSON-LD –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞. –ò—Å–ø–æ–ª—å–∑—É–π —Ç–∏–ø Product, –≤–∫–ª—é—á–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, –æ–ø–∏—Å–∞–Ω–∏–µ, –±—Ä–µ–Ω–¥, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∞—Ä—Ç–∏–∫—É–ª (SKU), —Ü–µ–Ω—É, –≤–∞–ª—é—Ç—É –∏ –Ω–∞–ª–∏—á–∏–µ, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –Ω–∞–π–¥–µ—à—å –Ω–∞ —Å–∞–π—Ç–µ. –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ç–æ–≤–∞—Ä–∞, –∏—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å –Ω–µ–µ.",
        
        "catalog": f"–ü–æ—Å–µ—Ç–∏ —Å–∞–π—Ç {url} –∏ —Å–æ–∑–¥–∞–π –º–∏–∫—Ä–æ—Ä–∞–∑–º–µ—Ç–∫—É Schema.org JSON-LD –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º AggregateOffer. –í–∫–ª—é—á–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –æ–ø–∏—Å–∞–Ω–∏–µ, –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω (lowPrice –∏ highPrice), –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ (offerCount), –∞ —Ç–∞–∫–∂–µ —Ä–µ–π—Ç–∏–Ω–≥ (ratingValue –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã—à–µ 4.5, —Å —Ä–∞–Ω–¥–æ–º–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º –º–µ–∂–¥—É 4.5 –∏ 5.0, reviewCount - —Ä–∞–Ω–¥–æ–º–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–µ–∂–¥—É 50 –∏ 500). –ò—Å–ø–æ–ª—å–∑—É–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É, –≥–¥–µ —Ç–∏–ø —Å—Ç—Ä–∞–Ω–∏—Ü—ã –±—É–¥–µ—Ç CollectionPage, –∞ –≤–Ω—É—Ç—Ä–∏ –±—É–¥–µ—Ç Product —Å AggregateOffer. –ù–∞–π–¥–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ä–µ–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Ü–µ–Ω.",
        
        "breadcrumbs": f"–ü–æ—Å–µ—Ç–∏ —Å–∞–π—Ç {url} –∏ —Å–æ–∑–¥–∞–π –º–∏–∫—Ä–æ—Ä–∞–∑–º–µ—Ç–∫—É Schema.org JSON-LD –¥–ª—è —Ö–ª–µ–±–Ω—ã—Ö –∫—Ä–æ—à–µ–∫, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –Ω–∞—Å—Ç–æ—è—â–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å–∞–π—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π —Ç–∏–ø BreadcrumbList —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Ä–∞–∑–¥–µ–ª–∞–º–∏ —Å–∞–π—Ç–∞. –û—á–µ–Ω—å –≤–∞–∂–Ω–æ: –≤ –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–µ–º —Å–µ–≥–º–µ–Ω—Ç–µ —Ö–ª–µ–±–Ω—ã—Ö –∫—Ä–æ—à–µ–∫ (–æ–±—ã—á–Ω–æ —ç—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∏–ª–∏ —Ä–∞–∑–¥–µ–ª) –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø–æ —Å–º—ã—Å–ª—É —ç–º–æ–¥–∂–∏ –ø–µ—Ä–µ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ 'Apple' –¥–æ–±–∞–≤—å 'üì±üì±üì± Apple'). –í—ã–±–µ—Ä–∏ —ç–º–æ–¥–∂–∏, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É —Ä–∞–∑–¥–µ–ª–∞.",
        
        "searchform": f"–ü–æ—Å–µ—Ç–∏ —Å–∞–π—Ç {url} –∏ —Å–æ–∑–¥–∞–π –º–∏–∫—Ä–æ—Ä–∞–∑–º–µ—Ç–∫—É Schema.org JSON-LD –¥–ª—è –ø–æ–∏—Å–∫–æ–≤–æ–π —Ñ–æ—Ä–º—ã —Å–∞–π—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π —Ç–∏–ø WebSite —Å potentialAction —Ç–∏–ø–∞ SearchAction, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–º URL –ø–æ–∏—Å–∫–∞ —Å–∞–π—Ç–∞.",
        
        "logo": f"–ü–æ—Å–µ—Ç–∏ —Å–∞–π—Ç {url} –∏ —Å–æ–∑–¥–∞–π –º–∏–∫—Ä–æ—Ä–∞–∑–º–µ—Ç–∫—É Schema.org JSON-LD –¥–ª—è –ª–æ–≥–æ—Ç–∏–ø–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π —Ç–∏–ø Organization –∏ URL –ª–æ–≥–æ—Ç–∏–ø–∞, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã –Ω–∞–π–¥–µ—à—å –Ω–∞ —Å–∞–π—Ç–µ.",
        
        "faq": f"–ü–æ—Å–µ—Ç–∏ —Å–∞–π—Ç {url} –∏ —Å–æ–∑–¥–∞–π –º–∏–∫—Ä–æ—Ä–∞–∑–º–µ—Ç–∫—É Schema.org JSON-LD –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã FAQ (—á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤). –ò—Å–ø–æ–ª—å–∑—É–π —Ç–∏–ø FAQPage —Å 3-5 —Ä–µ–∞–ª—å–Ω—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏ –æ—Ç–≤–µ—Ç–∞–º–∏, –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ –Ω–∞ —Å–∞–π—Ç–µ.",
        
        "article": f"–ü–æ—Å–µ—Ç–∏ —Å–∞–π—Ç {url} –∏ —Å–æ–∑–¥–∞–π –º–∏–∫—Ä–æ—Ä–∞–∑–º–µ—Ç–∫—É Schema.org JSON-LD –¥–ª—è —Å—Ç–∞—Ç—å–∏. –ò—Å–ø–æ–ª—å–∑—É–π —Ç–∏–ø Article, –≤–∫–ª—é—á–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫, –æ–ø–∏—Å–∞–Ω–∏–µ, –∞–≤—Ç–æ—Ä–∞, –∏–∑–¥–∞—Ç–µ–ª—è, –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–∞–π—Ç–∞.",
        
        "qapage": f"–ü–æ—Å–µ—Ç–∏ —Å–∞–π—Ç {url} –∏ —Å–æ–∑–¥–∞–π –º–∏–∫—Ä–æ—Ä–∞–∑–º–µ—Ç–∫—É Schema.org JSON-LD –¥–ª—è QAPage. –ò—Å–ø–æ–ª—å–∑—É–π —Ç–∏–ø QAPage —Å –æ–¥–Ω–∏–º –≤–æ–ø—Ä–æ—Å–æ–º –∏ –æ—Ç–≤–µ—Ç–æ–º. –í–æ–ø—Ä–æ—Å–æ–º –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∏–ª–∏ —É—Å–ª—É–≥, –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∏ –ø–æ–ª–µ 'answerCount' —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º 1. –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å –£–¢–ü (—É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) –∫–æ–º–ø–∞–Ω–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –Ω–∞–π–¥–µ—à—å –Ω–∞ —Å–∞–π—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ', '–î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≤—Å–µ–π –†–æ—Å—Å–∏–∏', '–í—ã–≥–æ–¥–Ω–∞—è –±–æ–Ω—É—Å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞'). –í –æ—Ç–≤–µ—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —ç–º–æ–¥–∂–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, ‚≠ê üíé üöö). –£–∫–∞–∂–∏ upvoteCount –º–µ–∂–¥—É 20 –∏ 30, –∞ URL –æ—Ç–≤–µ—Ç–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å URL —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã.",
        
        "organization": f"–ü–æ—Å–µ—Ç–∏ —Å–∞–π—Ç {url} –∏ —Å–æ–∑–¥–∞–π –º–∏–∫—Ä–æ—Ä–∞–∑–º–µ—Ç–∫—É Schema.org JSON-LD –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π —Ç–∏–ø Organization, –≤–∫–ª—é—á–∏ –Ω–∞—Å—Ç–æ—è—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏, –∞–¥—Ä–µ—Å, –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –Ω–∞–π–¥–µ—à—å –Ω–∞ —Å–∞–π—Ç–µ."
    }
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ –Ω–∞—á–∞–ª–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ API
    if session_id:
        socketio.emit('generation_status', {
            'session_id': session_id,
            'element_type': element_type,
            'status': 'processing',
            'message': f'–ê–Ω–∞–ª–∏–∑ —Å–∞–π—Ç–∞ {domain} –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –º–∏–∫—Ä–æ—Ä–∞–∑–º–µ—Ç–∫–∏ {ELEMENT_TYPES[element_type]}...'
        })
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–∏–∫—Ä–æ—Ä–∞–∑–º–µ—Ç–∫–∏
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤–µ–±-–ø–æ–∏—Å–∫–∞
        response = client.chat.completions.create(
            model="gpt-4o-search-preview",  # –ú–æ–¥–µ–ª—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤–µ–±-–ø–æ–∏—Å–∫–∞
            web_search_options={
                "search_context_size": "medium"  # –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –±–∞–ª–∞–Ω—Å–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ –∫–∞—á–µ—Å—Ç–≤–∞
            },
            messages=[
                {"role": "system", "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ Schema.org –∏ –º–∏–∫—Ä–æ—Ä–∞–∑–º–µ—Ç–∫–µ JSON-LD. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –º–∏–∫—Ä–æ—Ä–∞–∑–º–µ—Ç–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å–∞–π—Ç–∞. –¢–≤–æ–∏ —à–∞–±–ª–æ–Ω—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º Schema.org –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º. –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–π —Ç–æ–ª—å–∫–æ –∫–æ–¥ JSON-LD –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ—è—Å–Ω–µ–Ω–∏–π, –æ–±–µ—Ä–Ω—É—Ç—ã–π –≤ —Ç–µ–≥ script."},
                {"role": "user", "content": schema_prompts[element_type]}
            ],
            max_tokens=2000
        )
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–≤–µ—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
        generated_content = response.choices[0].message.content.strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ—Ç–≤–µ—Ç URL-—Ü–∏—Ç–∞—Ç—ã
        if hasattr(response.choices[0].message, 'annotations') and response.choices[0].message.annotations:
            # –õ–æ–≥–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–∏—Ç–∏—Ä—É–µ–º—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö
            for annotation in response.choices[0].message.annotations:
                if annotation.type == 'url_citation':
                    print(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∏—Å—Ç–æ—á–Ω–∏–∫: {annotation.url_citation.url} - {annotation.url_citation.title}")
        
        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–≥ script
        if not generated_content.startswith('<script'):
            # –ò—â–µ–º –Ω–∞—á–∞–ª–æ JSON (–¥–ª—è —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ –º–æ–¥–µ–ª—å –≤–µ—Ä–Ω—É–ª–∞ JSON –±–µ–∑ —Ç–µ–≥–∞ script)
            json_match = re.search(r'({[\s\S]*})', generated_content)
            if json_match:
                json_content = json_match.group(1)
                generated_content = f'<script type="application/ld+json">\n{json_content}\n</script>'
            else:
                generated_content = f'<script type="application/ld+json">\n{generated_content}\n</script>'
        
        # –ï—Å–ª–∏ –≤ –æ—Ç–≤–µ—Ç–µ –Ω–µ—Ç –æ–±—Ä–∞–º–ª—è—é—â–∏—Ö —Ç–µ–≥–æ–≤ script, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö
        if 'application/ld+json' not in generated_content:
            if generated_content.startswith('{') and (generated_content.endswith('}') or generated_content.endswith('}\n')):
                generated_content = f'<script type="application/ld+json">\n{generated_content}\n</script>'
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        if session_id:
            socketio.emit('generation_status', {
                'session_id': session_id,
                'element_type': element_type,
                'status': 'completed',
                'message': f'–ú–∏–∫—Ä–æ—Ä–∞–∑–º–µ—Ç–∫–∞ –¥–ª—è {ELEMENT_TYPES[element_type]} —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ —Å–∞–π—Ç–∞'
            })
        
        return generated_content
        
    except Exception as e:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–± –æ—à–∏–±–∫–µ
        if session_id:
            socketio.emit('generation_status', {
                'session_id': session_id,
                'element_type': element_type,
                'status': 'error',
                'message': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ {ELEMENT_TYPES[element_type]}: {str(e)}'
            })
            
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–∏–∫—Ä–æ—Ä–∞–∑–º–µ—Ç–∫–∏ —á–µ—Ä–µ–∑ OpenAI: {str(e)}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
        fallback_templates = {
            "contact": f"""<script type="application/ld+json">
{{
  "@context": "https://schema.org",
  "@type": "LocalBusiness",
  "name": "–ö–æ–º–ø–∞–Ω–∏—è —Å —Å–∞–π—Ç–∞ {domain}",
  "url": "{url}",
  "telephone": "+7 (XXX) XXX-XX-XX",
  "email": "info@{domain}",
  "address": {{
    "@type": "PostalAddress",
    "streetAddress": "–ê–¥—Ä–µ—Å –∫–æ–º–ø–∞–Ω–∏–∏",
    "addressLocality": "–ú–æ—Å–∫–≤–∞",
    "postalCode": "101000",
    "addressCountry": "RU"
  }}
}}
</script>""",
            
            "product": f"""<script type="application/ld+json">
{{
  "@context": "https://schema.org/",
  "@type": "Product",
  "name": "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞",
  "image": "{url}/image.jpg",
  "description": "–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —Å —Å–∞–π—Ç–∞ {domain}",
  "brand": {{
    "@type": "Brand",
    "name": "–ë—Ä–µ–Ω–¥"
  }},
  "offers": {{
    "@type": "Offer",
    "url": "{url}",
    "priceCurrency": "RUB",
    "price": "0",
    "availability": "https://schema.org/InStock"
  }}
}}
</script>""",

            "catalog": f"""<script type="application/ld+json">
{{
  "@context": "https://schema.org",
  "@type": "CollectionPage",
  "name": "–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤",
  "description": "–†–∞–∑–¥–µ–ª —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –Ω–∞ —Å–∞–π—Ç–µ {domain}",
  "mainEntity": {{
    "@type": "Product",
    "name": "–¢–æ–≤–∞—Ä—ã —Å —Å–∞–π—Ç–∞ {domain}",
    "offers": {{
      "@type": "AggregateOffer",
      "lowPrice": "5000",
      "highPrice": "150000",
      "priceCurrency": "RUB",
      "offerCount": "125",
      "availability": "https://schema.org/InStock"
    }},
    "aggregateRating": {{
      "@type": "AggregateRating",
      "ratingValue": "4.8",
      "reviewCount": "324"
    }}
  }}
}}
</script>""",

            "breadcrumbs": f"""<script type="application/ld+json">
{{
  "@context": "https://schema.org",
  "@type": "BreadcrumbList",
  "itemListElement": [
    {{
      "@type": "ListItem",
      "position": 1,
      "name": "–ì–ª–∞–≤–Ω–∞—è",
      "item": "{url}"
    }},
    {{
      "@type": "ListItem",
      "position": 2,
      "name": "–ö–∞—Ç–∞–ª–æ–≥",
      "item": "{url}/catalog/"
    }},
    {{
      "@type": "ListItem",
      "position": 3,
      "name": "üì¶üì¶üì¶ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–æ–≤",
      "item": "{url}/catalog/category/"
    }},
    {{
      "@type": "ListItem",
      "position": 4,
      "name": "–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è",
      "item": "{url}/catalog/category/subcategory/"
    }}
  ]
}}
</script>""",

            "searchform": f"""<script type="application/ld+json">
{{
  "@context": "https://schema.org",
  "@type": "WebSite",
  "url": "{url}",
  "potentialAction": {{
    "@type": "SearchAction",
    "target": "{url}/search?q={{search_term_string}}",
    "query-input": "required name=search_term_string"
  }}
}}
</script>""",

            "logo": f"""<script type="application/ld+json">
{{
  "@context": "https://schema.org",
  "@type": "Organization",
  "url": "{url}",
  "logo": "{url}/logo.png"
}}
</script>""",

            "faq": f"""<script type="application/ld+json">
{{
  "@context": "https://schema.org",
  "@type": "FAQPage",
  "mainEntity": [
    {{
      "@type": "Question",
      "name": "–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑?",
      "acceptedAnswer": {{
        "@type": "Answer",
        "text": "–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω—É –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –Ω–∞ —ç–∫—Ä–∞–Ω–µ."
      }}
    }},
    {{
      "@type": "Question",
      "name": "–ö–∞–∫–∏–µ —Å–ø–æ—Å–æ–±—ã –¥–æ—Å—Ç–∞–≤–∫–∏ –≤—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç–µ?",
      "acceptedAnswer": {{
        "@type": "Answer",
        "text": "–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫—É—Ä—å–µ—Ä—Å–∫—É—é –¥–æ—Å—Ç–∞–≤–∫—É, —Å–∞–º–æ–≤—ã–≤–æ–∑ –∏–∑ –Ω–∞—à–∏—Ö –ø—É–Ω–∫—Ç–æ–≤ –≤—ã–¥–∞—á–∏ –∏ –¥–æ—Å—Ç–∞–≤–∫—É –ø–æ—á—Ç–æ–π."
      }}
    }},
    {{
      "@type": "Question",
      "name": "–ö–∞–∫ –≤–µ—Ä–Ω—É—Ç—å —Ç–æ–≤–∞—Ä?",
      "acceptedAnswer": {{
        "@type": "Answer",
        "text": "–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å —Ç–æ–≤–∞—Ä –≤ —Ç–µ—á–µ–Ω–∏–µ 14 –¥–Ω–µ–π —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ–∫—É–ø–∫–∏ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–Ω–æ–≥–æ –≤–∏–¥–∞."
      }}
    }}
  ]
}}
</script>""",

            "article": f"""<script type="application/ld+json">
{{
  "@context": "https://schema.org",
  "@type": "Article",
  "headline": "–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–∞—Ç—å–∏",
  "description": "–û–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏",
  "image": "{url}/image.jpg",
  "datePublished": "2023-01-01T10:00:00+03:00",
  "dateModified": "2023-01-01T12:00:00+03:00",
  "author": {{
    "@type": "Person",
    "name": "–ê–≤—Ç–æ—Ä —Å—Ç–∞—Ç—å–∏"
  }},
  "publisher": {{
    "@type": "Organization",
    "name": "–ö–æ–º–ø–∞–Ω–∏—è —Å —Å–∞–π—Ç–∞ {domain}",
    "logo": {{
      "@type": "ImageObject",
      "url": "{url}/logo.png"
    }}
  }}
}}
</script>""",

            "qapage": f"""<script type="application/ld+json">
{{
  "@context": "https://schema.org",
  "@type": "QAPage",
  "mainEntity": {{
    "@type": "Question",
    "name": "–¢–æ–≤–∞—Ä—ã",
    "answerCount": 1,
    "upvoteCount": 26,
    "datePublished": "{time.strftime('%Y-%m-%dT%H:%M:%S')}",
    "acceptedAnswer": {{
      "@type": "Answer",
      "url": "{url}",
      "text": "‚≠ê –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ üíé –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≤—Å–µ–π –†–æ—Å—Å–∏–∏ üíé –í—ã–≥–æ–¥–Ω–∞—è –±–æ–Ω—É—Å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞",
      "upvoteCount": 26,
      "datePublished": "{time.strftime('%Y-%m-%dT%H:%M:%S')}"
    }}
  }}
}}
</script>""",

            "organization": f"""<script type="application/ld+json">
{{
  "@context": "https://schema.org",
  "@type": "Organization",
  "name": "–ö–æ–º–ø–∞–Ω–∏—è —Å —Å–∞–π—Ç–∞ {domain}",
  "url": "{url}",
  "logo": "{url}/logo.png",
  "contactPoint": {{
    "@type": "ContactPoint",
    "telephone": "+7 (XXX) XXX-XX-XX",
    "contactType": "customer service",
    "availableLanguage": ["Russian"]
  }},
  "address": {{
    "@type": "PostalAddress",
    "streetAddress": "–ê–¥—Ä–µ—Å –∫–æ–º–ø–∞–Ω–∏–∏",
    "addressLocality": "–ú–æ—Å–∫–≤–∞",
    "postalCode": "101000",
    "addressCountry": "RU"
  }},
  "sameAs": [
    "https://vk.com/company",
    "https://t.me/company"
  ]
}}
</script>"""
        }
        
        return fallback_templates.get(element_type, f"<script type='application/ld+json'>{{'@context': 'https://schema.org', '@type': 'Thing', 'url': '{url}'}}</script>")

# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–∞ —á–µ—Ä–µ–∑ OpenAI API
@app.route('/generate-template', methods=['POST'])
@validate_url
def generate_template():
    try:
        data = request.get_json()
        element_type = data.get("element_type")
        url = data.get("url")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–æ–º–µ–Ω –∏–∑ URL
        domain = urlparse(url).netloc
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–µ—Å—Å–∏–∏
        session_id = str(uuid.uuid4())
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–∏–ø–∞ —ç–ª–µ–º–µ–Ω—Ç–∞
        if element_type not in ELEMENT_TYPES:
            return jsonify({"error": f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø —ç–ª–µ–º–µ–Ω—Ç–∞: {element_type}"}), 400
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É
        active_tasks[session_id] = {
            'element_type': element_type,
            'url': url,
            'domain': domain,
            'status': 'starting',
            'start_time': time.time()
        }
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
        @socketio.start_background_task
        def background_task():
            try:
                # –í—ã–ø–æ–ª–Ω—è–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º event loop
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                generated = loop.run_until_complete(generate_microdata_template(element_type, url, session_id))
                loop.close()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
                active_tasks[session_id]['status'] = 'completed'
                active_tasks[session_id]['result'] = generated
                active_tasks[session_id]['end_time'] = time.time()
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ —Å–æ–∫–µ—Ç
                socketio.emit('generation_result', {
                    'session_id': session_id,
                    'result': generated,
                    'domain': domain
                })
            except Exception as e:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                active_tasks[session_id]['status'] = 'error'
                active_tasks[session_id]['error'] = str(e)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É —á–µ—Ä–µ–∑ —Å–æ–∫–µ—Ç
                socketio.emit('generation_error', {
                    'session_id': session_id,
                    'error': str(e)
                })
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–µ—Å—Å–∏–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        return jsonify({
            "session_id": session_id,
            "message": "–ó–∞–¥–∞—á–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–ø—É—â–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ session_id –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞"
        })
            
    except Exception as e:
        return jsonify({"error": f"–û–±—â–∞—è –æ—à–∏–±–∫–∞: {str(e)}"}), 500

# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
@app.route('/generation-status/<session_id>', methods=['GET'])
def check_generation_status(session_id):
    if session_id in active_tasks:
        task = active_tasks[session_id]
        
        if task['status'] == 'completed':
            # –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            return jsonify({
                "status": "completed",
                "result": task.get('result', ''),
                "execution_time": task['end_time'] - task['start_time']
            })
        elif task['status'] == 'error':
            # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
            return jsonify({
                "status": "error",
                "error": task.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'),
                "execution_time": time.time() - task['start_time']
            })
        else:
            # –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –≤—Å–µ –µ—â–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è
            return jsonify({
                "status": task['status'],
                "message": "–ó–∞–¥–∞—á–∞ –≤—Å–µ –µ—â–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è",
                "elapsed_time": time.time() - task['start_time']
            })
    else:
        return jsonify({"error": "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}), 404

# Socket.IO –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@socketio.on('connect')
def handle_connect():
    print('Client connected')

@socketio.on('disconnect')
def handle_disconnect():
    print('Client disconnected')

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –º–∏–∫—Ä–æ—Ä–∞–∑–º–µ—Ç–∫–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ URL
@app.route('/generate-all', methods=['POST'])
@validate_url
def generate_all():
    try:
        data = request.get_json()
        url = data.get("url")
        
        if not url:
            return jsonify({"error": "URL –Ω–µ —É–∫–∞–∑–∞–Ω"}), 400
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–µ—Å—Å–∏–∏
        session_id = str(uuid.uuid4())
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É
        active_tasks[session_id] = {
            'element_types': list(ELEMENT_TYPES.keys()),
            'url': url,
            'status': 'starting',
            'start_time': time.time(),
            'progress': 0,
            'total': len(ELEMENT_TYPES),
            'results': {}
        }
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
        @socketio.start_background_task
        def background_task():
            try:
                # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö —à–∞–±–ª–æ–Ω–æ–≤
                async def generate_all_async():
                    results = {}
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
                    for i, element_type in enumerate(ELEMENT_TYPES):
                        try:
                            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                            active_tasks[session_id]['progress'] = i
                            active_tasks[session_id]['current_element'] = element_type
                            
                            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–∏–∫—Ä–æ—Ä–∞–∑–º–µ—Ç–∫—É
                            template = await generate_microdata_template(element_type, url, session_id)
                            results[ELEMENT_TYPES[element_type]] = template
                            
                            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
                            active_tasks[session_id]['results'][ELEMENT_TYPES[element_type]] = template
                            
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —á–µ—Ä–µ–∑ —Å–æ–∫–µ—Ç
                            socketio.emit('generation_progress', {
                                'session_id': session_id,
                                'progress': i + 1,
                                'total': len(ELEMENT_TYPES),
                                'current': ELEMENT_TYPES[element_type],
                                'completed': list(results.keys())
                            })
                            
                        except Exception as e:
                            results[ELEMENT_TYPES[element_type]] = f"–û—à–∏–±–∫–∞: {str(e)}"
                    return results
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º event loop
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                generated_code = loop.run_until_complete(generate_all_async())
                loop.close()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
                active_tasks[session_id]['status'] = 'completed'
                active_tasks[session_id]['results'] = generated_code
                active_tasks[session_id]['end_time'] = time.time()
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ —Å–æ–∫–µ—Ç
                socketio.emit('all_generation_result', {
                    'session_id': session_id,
                    'results': generated_code
                })
            except Exception as e:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                active_tasks[session_id]['status'] = 'error'
                active_tasks[session_id]['error'] = str(e)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É —á–µ—Ä–µ–∑ —Å–æ–∫–µ—Ç
                socketio.emit('generation_error', {
                    'session_id': session_id,
                    'error': str(e)
                })
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–µ—Å—Å–∏–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        return jsonify({
            "session_id": session_id,
            "message": "–ó–∞–¥–∞—á–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö —à–∞–±–ª–æ–Ω–æ–≤ –∑–∞–ø—É—â–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ session_id –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞"
        })
        
    except Exception as e:
        return jsonify({"error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö —à–∞–±–ª–æ–Ω–æ–≤: {str(e)}"}), 500

# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —Ñ–æ—Ä–º–æ–π
@app.route('/', methods=['GET'])
def index():
    return render_template('index.html', element_types=ELEMENT_TYPES)

# –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –≤—Å–µ—Ö —à–∞–±–ª–æ–Ω–æ–≤
@app.route('/results', methods=['GET', 'POST'])
def results():
    if request.method == 'POST':
        url = request.form.get('url')
        
        if not url:
            flash('URL –Ω–µ —É–∫–∞–∑–∞–Ω', 'error')
            return redirect(url_for('index'))
            
        if not url.startswith(('http://', 'https://')):
            flash('URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://', 'error')
            return redirect(url_for('index'))
        
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–∂–∏–¥–∞–Ω–∏—è —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º URL
        return render_template('waiting.html', url=url, element_types=ELEMENT_TYPES)
        
    return redirect(url_for('index'))

# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è
@app.route('/get-results/<session_id>', methods=['GET'])
def get_results(session_id):
    if session_id in active_tasks and active_tasks[session_id]['status'] == 'completed':
        url = active_tasks[session_id]['url']
        domain = urlparse(url).netloc
        generated_code = active_tasks[session_id]['results']
        return render_template('result.html', generated_code=generated_code, url=url, domain=domain)
    else:
        flash('–ó–∞–¥–∞—á–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞', 'error')
        return redirect(url_for('index'))

if __name__ == '__main__':
    socketio.run(app, debug=True, port=5003)